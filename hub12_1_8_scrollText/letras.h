typedef struct {
    char ch;
    uint8_t glyph[8];
} Glyph;

// Fuente 8x8 (A–Z, a–z, 0–9, espacio, signos básicos)
static const Glyph font8x8[] = {
    { ' ', {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00} },
    { '0', {0x3C,0x42,0x46,0x4A,0x52,0x62,0x42,0x3C} },
    { '1', {0x10,0x30,0x50,0x10,0x10,0x10,0x10,0x7C} },
    { '2', {0x3C,0x42,0x02,0x0C,0x30,0x40,0x40,0x7E} },
    { '3', {0x3C,0x42,0x02,0x1C,0x02,0x42,0x42,0x3C} },
    { '4', {0x08,0x18,0x28,0x48,0x88,0xFE,0x08,0x08} },
    { '5', {0x7E,0x40,0x40,0x7C,0x02,0x02,0x42,0x3C} },
    { '6', {0x1C,0x20,0x40,0x7C,0x42,0x42,0x42,0x3C} },
    { '7', {0x7E,0x42,0x04,0x08,0x10,0x10,0x10,0x10} },
    { '8', {0x3C,0x42,0x42,0x3C,0x42,0x42,0x42,0x3C} },
    { '9', {0x3C,0x42,0x42,0x42,0x3E,0x02,0x04,0x38} },

    { 'A', {0x18,0x24,0x42,0x42,0x7E,0x42,0x42,0x42} },
    { 'B', {0x7C,0x42,0x42,0x7C,0x42,0x42,0x42,0x7C} },
    { 'C', {0x3C,0x42,0x40,0x40,0x40,0x42,0x42,0x3C} },
    { 'D', {0x78,0x44,0x42,0x42,0x42,0x42,0x44,0x78} },
    { 'E', {0x7E,0x40,0x40,0x7C,0x40,0x40,0x40,0x7E} },
    { 'F', {0x7E,0x40,0x40,0x7C,0x40,0x40,0x40,0x40} },
    { 'G', {0x3C,0x42,0x40,0x40,0x4E,0x42,0x42,0x3C} },
    { 'H', {0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42} },
    { 'I', {0x3C,0x10,0x10,0x10,0x10,0x10,0x10,0x3C} },
    { 'J', {0x1E,0x04,0x04,0x04,0x04,0x44,0x44,0x38} },
    { 'K', {0x42,0x44,0x48,0x70,0x48,0x44,0x42,0x42} },
    { 'L', {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7E} },
    { 'M', {0x42,0x66,0x5A,0x5A,0x42,0x42,0x42,0x42} },
    { 'N', {0x42,0x62,0x52,0x4A,0x46,0x42,0x42,0x42} },
    { 'O', {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C} },
    { 'P', {0x7C,0x42,0x42,0x7C,0x40,0x40,0x40,0x40} },
    { 'Q', {0x3C,0x42,0x42,0x42,0x4A,0x44,0x3A,0x00} },
    { 'R', {0x7C,0x42,0x42,0x7C,0x48,0x44,0x42,0x42} },
    { 'S', {0x3C,0x42,0x40,0x3C,0x02,0x02,0x42,0x3C} },
    { 'T', {0x7E,0x10,0x10,0x10,0x10,0x10,0x10,0x10} },
    { 'U', {0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C} },
    { 'V', {0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18} },
    { 'W', {0x42,0x42,0x42,0x42,0x5A,0x5A,0x66,0x42} },
    { 'X', {0x42,0x42,0x24,0x18,0x18,0x24,0x42,0x42} },
    { 'Y', {0x42,0x42,0x24,0x18,0x10,0x10,0x10,0x10} },
    { 'Z', {0x7E,0x02,0x04,0x18,0x20,0x40,0x40,0x7E} },

    { 'a', {0x00,0x00,0x00,0x3C,0x02,0x3E,0x42,0x3E} },
    { 'b', {0x40,0x40,0x5C,0x62,0x42,0x42,0x62,0x5C} },
    { 'c', {0x00,0x00,0x3C,0x42,0x40,0x40,0x42,0x3C} },
    { 'd', {0x02,0x02,0x3A,0x46,0x42,0x42,0x46,0x3A} },
    { 'e', {0x00,0x00,0x3C,0x42,0x7E,0x40,0x42,0x3C} },
    { 'f', {0x1C,0x22,0x20,0x78,0x20,0x20,0x20,0x20} },
    { 'g', {0x00,0x00,0x3A,0x46,0x46,0x3A,0x02,0x3C} },
    { 'h', {0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42} },
    { 'i', {0x10,0x00,0x30,0x10,0x10,0x10,0x10,0x38} },
    { 'j', {0x04,0x00,0x0C,0x04,0x04,0x04,0x44,0x38} },
    { 'k', {0x40,0x40,0x44,0x48,0x70,0x48,0x44,0x42} },
    { 'l', {0x30,0x10,0x10,0x10,0x10,0x10,0x10,0x38} },
    { 'm', {0x00,0x00,0x7C,0x52,0x52,0x52,0x52,0x52} },
    { 'n', {0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x42} },
    { 'o', {0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x3C} },
    { 'p', {0x00,0x00,0x5C,0x62,0x62,0x5C,0x40,0x40} },
    { 'q', {0x00,0x00,0x3A,0x46,0x46,0x3A,0x02,0x02} },
    { 'r', {0x00,0x00,0x5C,0x62,0x40,0x40,0x40,0x40} },
    { 's', {0x00,0x00,0x3E,0x40,0x3C,0x02,0x42,0x3C} },
    { 't', {0x20,0x20,0x78,0x20,0x20,0x20,0x22,0x1C} },
    { 'u', {0x00,0x00,0x42,0x42,0x42,0x42,0x46,0x3A} },
    { '[', {0x44,0x44,0x00,0x42,0x42,0x42,0x46,0x3A} },
    { 'v', {0x00,0x00,0x42,0x42,0x42,0x42,0x24,0x18} },
    { 'w', {0x00,0x00,0x42,0x42,0x52,0x52,0x52,0x3C} },
    { 'x', {0x00,0x00,0x42,0x24,0x18,0x18,0x24,0x42} },
    { 'y', {0x00,0x00,0x42,0x42,0x46,0x3A,0x02,0x3C} },
    { 'z', {0x00,0x00,0x7E,0x04,0x18,0x20,0x40,0x7E} },

    { '!', {0x10,0x10,0x10,0x10,0x10,0x00,0x10,0x00} },
    { '?', {0x3C,0x42,0x02,0x0C,0x10,0x00,0x10,0x00} },
    { '.', {0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18} },
    { ',', {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x10} },
    { '-', {0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00} },

    { ':', {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00} },
    { ';', {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30} }
};

#define FONT_LEN (sizeof(font8x8)/sizeof(font8x8[0]))

// Busca el glifo de un caracter
const uint8_t* getGlyph(char ch) {
    for (int i = 0; i < FONT_LEN; i++) {
        if (font8x8[i].ch == ch) return font8x8[i].glyph;
    }
    return font8x8[FONT_LEN-1].glyph; // si no existe, retorna espacio
}

// ===== Escribir texto centrado en matriz 16x64 =====
void write_text(uint8_t matrix[16][64], const char *text) {
    memset(matrix, 0, 16*64);

    int spacing = 1;         
    int maxCols = 64;        
    int charWidth = 8;       
    int maxCharsPerLine = maxCols / (charWidth + spacing); // 7

    // Dividir texto en dos líneas
    int len = strlen(text);
    int line1_len = (len > maxCharsPerLine) ? maxCharsPerLine : len;
    int line2_len = (len > maxCharsPerLine) ? (len - maxCharsPerLine) : 0;
    if (line2_len > maxCharsPerLine) line2_len = maxCharsPerLine;

    int totalLines = (line2_len > 0) ? 2 : 1;

    for (int line = 0; line < totalLines; line++) {
        int nChars = (line == 0) ? line1_len : line2_len;
        if (nChars <= 0) continue;

        // ancho en píxeles usado por esa línea
        int totalWidth = nChars * charWidth + (nChars - 1) * spacing;
        int colStart = (maxCols - totalWidth) / 2;

        // si solo hay una línea → centramos verticalmente
        int rowOffset;
        if (totalLines == 1) {
            rowOffset = 4;  // ocupa filas 4..11 (8 px altos)
        } else {
            rowOffset = line * 8; // primera línea arriba, segunda abajo
        }

        int col = colStart;
        int idxStart = (line == 0) ? 0 : line1_len;
        for (int t = 0; t < nChars; t++) {
            const uint8_t *glyph = getGlyph(text[idxStart + t]);

            for (int row = 0; row < 8; row++) {
                uint8_t bits = glyph[row];
                for (int bit = 0; bit < 8; bit++) {
                    int pixel = (bits & (1 << (7 - bit))) ? 1 : 0;
                    int r = rowOffset + row;
                    int c = col + bit;
                    if (r < 16 && c < 64) matrix[r][c] = pixel;
                }
            }
            col += charWidth + spacing;
        }
    }
}

void copySubMatrix(uint8_t src[16][64], uint8_t dest[8][16], int startFila, int startCol) {
  for (int f = 0; f < 8; f++) {
    for (int c = 0; c < 16; c++) {
      dest[f][c] = src[startFila + f][startCol + c];
    }
  }
}
